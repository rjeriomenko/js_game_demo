/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/game-logic/abilities/ability.js":
/*!*********************************************!*\
  !*** ./src/game-logic/abilities/ability.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Ability)\n/* harmony export */ });\nconsole.log(\"ability.js started loading\");\nclass Ability {\n    constructor(entity, duration = -1) {\n        this.entity = entity;\n        this.duration = duration;\n        this.map = this.entity.map;\n    }\n}\nconsole.log(\"ability.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/abilities/ability.js?");

/***/ }),

/***/ "./src/game-logic/abilities/main-menu-ability.js":
/*!*******************************************************!*\
  !*** ./src/game-logic/abilities/main-menu-ability.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MainMenuAbility)\n/* harmony export */ });\n/* harmony import */ var _ability_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ability.js */ \"./src/game-logic/abilities/ability.js\");\nconsole.log(\"main-menu-ability.js started loading\");\n\n\nclass MainMenuAbility extends _ability_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(player) {\n        super(player);\n        this.coolDownTimer = 120;\n        this.coolDownCounter = 0;\n        this.boundBox = this.map.entities[1];\n    }\n    \n    coolDownReady() {\n        if (this.coolDownCounter === 0) {\n            this.coolDownCounter = this.coolDownTimer;\n            return true;\n        } else {\n            this.coolDownCounter--;\n        };\n    };\n\n    pickSameAxisCoordBetween(startCoord, endCoord) {\n        let smallerCoord = endCoord;\n        let largerCoord = startCoord;\n        if (endCoord > startCoord) {\n            smallerCoord = startCoord;\n            largerCoord = endCoord;\n        };\n\n        return Math.random() * (largerCoord - smallerCoord) + smallerCoord;\n    };\n\n    findTeleportCoords() {\n        let boundPositionX = this.boundBox.absolutePosition[0]\n        let boundPositionY = this.boundBox.absolutePosition[1]\n        let boundDimensionX = this.boundBox.dimension[0]\n        let boundDimensionY = this.boundBox.dimension[1]\n\n        let boundXLimit = boundPositionX + boundDimensionX\n        let boundYLimit = boundPositionY + boundDimensionY\n\n        let spawnX = this.pickSameAxisCoordBetween(boundPositionX, boundXLimit)\n        let spawnY = this.pickSameAxisCoordBetween(boundPositionY, boundYLimit)\n\n        return [spawnX, spawnY];\n    };\n\n    activate() {\n        if (this.coolDownReady()) {\n            let newCoords = this.findTeleportCoords();\n            this.entity.absolutePosition = newCoords;\n        };\n    };\n\n}\nconsole.log(\"main-menu-ability.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/abilities/main-menu-ability.js?");

/***/ }),

/***/ "./src/game-logic/abilities/missile.js":
/*!*********************************************!*\
  !*** ./src/game-logic/abilities/missile.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Missile)\n/* harmony export */ });\n/* harmony import */ var _ability_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ability.js */ \"./src/game-logic/abilities/ability.js\");\n/* harmony import */ var _entities_missile_projectile_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../entities/missile-projectile.js */ \"./src/game-logic/entities/missile-projectile.js\");\nconsole.log(\"missile.js started loading\");\n\n\n\nclass Missile extends _ability_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(player) {\n        super(player);\n        this.damage = 5;\n        this.projectileSpeed = 5;\n        this.coolDownTimer = 60;\n        this.coolDownCounter = 0;\n        this.firedCount = 0;\n    }\n\n    activate() {\n        if(this.coolDownReady()) {\n            let fireCoords = this.entity.findEntityCenterCoords(this.entity);\n            this.firedCount++;\n            let MissileProperties = {\n                \"damage\": this.damage,\n                \"speed\": this.projectileSpeed,\n                \"absolutepositionx\": fireCoords[0],\n                \"absolutepositiony\": fireCoords[1]\n            }\n            this.map.addEntity(new _entities_missile_projectile_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](`missile${this.firedCount}`, MissileProperties));\n        }\n    }\n\n    coolDownReady() {\n        if (this.coolDownCounter === 0) {\n            this.coolDownCounter = this.coolDownTimer;\n            return true;\n        } else {\n            this.coolDownCounter--;\n        };\n    };\n}\nconsole.log(\"missile.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/abilities/missile.js?");

/***/ }),

/***/ "./src/game-logic/abilities/regen.js":
/*!*******************************************!*\
  !*** ./src/game-logic/abilities/regen.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Regen)\n/* harmony export */ });\n/* harmony import */ var _ability_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ability.js */ \"./src/game-logic/abilities/ability.js\");\nconsole.log(\"regen.js started loading\");\n\n\nclass Regen extends _ability_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(player) {\n        super(player);\n        this.regenAmount = 2.5\n        this.coolDownTimer = 30;\n        this.coolDownCounter = 0;\n        this.regenTotal = 0\n    }\n\n    increaseRegen(amount) {\n        this.regenAmount += amount;\n    }\n\n    activate() {\n        debugger\n        if (this.coolDownReady()) {\n            let possibleHealth = this.entity.currentHealth + this.regenAmount;\n            if (possibleHealth >= this.entity.maxHealth) {\n                this.regenTotal += this.entity.maxHealth - this.entity.currentHealth;\n                this.entity.currentHealth = this.entity.maxHealth;\n            } else { \n                this.entity.currentHealth = possibleHealth;\n                this.regenTotal += this.regenAmount;\n            }\n        }\n    }\n\n    coolDownReady() {\n        if (this.coolDownCounter === 0) {\n            this.coolDownCounter = this.coolDownTimer;\n            return true;\n        } else {\n            this.coolDownCounter--;\n        };\n    };\n}\nconsole.log(\"regen.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/abilities/regen.js?");

/***/ }),

/***/ "./src/game-logic/camera.js":
/*!**********************************!*\
  !*** ./src/game-logic/camera.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Camera)\n/* harmony export */ });\n//This will follow the player or other entities around the map\n//This will update its own camera coordinates and view coordinates\nconsole.log(\"camera.js started loading\");\nclass Camera {\n    constructor(ctx, canvas, map, entityToFollow) {\n        this.ctx = ctx;\n        this.canvas = canvas;\n        this.map = map;\n        this.following = entityToFollow;\n    }\n\n    currentCameraCoords() {\n        let currentTransform = this.ctx.getTransform();\n        return [currentTransform.e, currentTransform.f];\n    };\n\n    currentViewCoords() {\n        let followingCoords = this.following.findEntityCenterCoords(this.following);\n        let viewCoords = [\n            followingCoords[0] - this.canvas.width / 2, \n            followingCoords[1] - this.canvas.height / 2\n        ];\n\n        return viewCoords;\n    };\n    \n    findEntityCenterCoords(entity) {\n        let [dimensionCenterX, dimensionCenterY, absoluteX, absoluteY] = [\n            entity.dimension[0] / 2,\n            entity.dimension[1] / 2,\n            entity.absolutePosition[0],\n            entity.absolutePosition[1]\n        ];\n        return [\n            absoluteX + dimensionCenterX,\n            absoluteY + dimensionCenterY\n        ];\n    }\n\n    followEntity() {\n        let entityCenterCoords = this.findEntityCenterCoords(this.following);\n        let cameraCoords = this.currentCameraCoords();\n        let targetCameraCoords = [      // logic here is modified to account for the fact that the camera \"moves\" in reverse\n            -entityCenterCoords[0] + this.canvas.width / 2,\n            -entityCenterCoords[1] + this.canvas.height / 2\n        ]\n        this.ctx.translate(\n            targetCameraCoords[0] - cameraCoords[0],\n            targetCameraCoords[1] - cameraCoords[1]\n        )\n        cameraCoords = this.currentCameraCoords();\n    }\n\n    followNewEntity(entity) {\n        this.following = entity;\n    }\n\n    overlapViewEntityXAxis(viewCoords, entity) {\n        let viewXStart = viewCoords[0];\n        let viewXLimit = viewCoords[0] + this.canvas.width;\n        let viewXDimension = viewXLimit - viewXStart;\n        let entityXPosition = entity.absolutePosition[0];\n        let entityXDimension = entity.dimension[0];\n\n        if (viewXStart + viewXDimension > entityXPosition && \n            entityXPosition + entityXDimension > viewXStart) {\n            return true;\n        };\n    };\n\n    overlapViewEntityYAxis(viewCoords, entity) {\n        let viewYStart = viewCoords[1];\n        let viewYLimit = viewCoords[1] + this.canvas.height;\n        let viewYDimension = viewYLimit - viewYStart;\n        let entityYPosition = entity.absolutePosition[1];\n        let entityYDimension = entity.dimension[1];\n\n        if (viewYStart + viewYDimension > entityYPosition &&\n            entityYPosition + entityYDimension > viewYStart) {\n            return true;\n        };\n    };\n\n    entityInView(entity) {\n        let viewCoords = this.currentViewCoords();\n\n        if (\n            this.overlapViewEntityXAxis(viewCoords, entity) &&\n            this.overlapViewEntityYAxis(viewCoords, entity)\n            ) { return true };\n\n        return false;\n    }\n    \n}\n\nconsole.log(\"camera.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/camera.js?");

/***/ }),

/***/ "./src/game-logic/entities/bee.js":
/*!****************************************!*\
  !*** ./src/game-logic/entities/bee.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Bee)\n/* harmony export */ });\n/* harmony import */ var _enemy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enemy.js */ \"./src/game-logic/entities/enemy.js\");\nconsole.log(\"bee.js started loading\");\n\nclass Bee extends _enemy_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(beeName, beeProperties){\n        super(beeName, beeProperties);\n        this.dimension = [25, 25];\n        this.collide = false;\n        this.color = \"yellow\";\n        this.speed = 4;\n        this.sprite = \"spriteurl\";\n        this.maxHealth = 3;\n        this.currentHealth = 3;\n        this.experience = 1;\n        this.touchDamage = 1;\n    }\n\n    directionToPlayer() {  // finds target X and Y (assuming the min either can be is 1)\n        let playerPosition = this.findEntityCenterCoords(this.map.entities.player);\n        let deltaX = playerPosition[0] - this.absolutePosition[0];\n        let deltaY = playerPosition[1] - this.absolutePosition[1];\n\n        return [1 * Math.sign(deltaX), 1 * Math.sign(deltaY)];\n    }\n\n}\nconsole.log(\"bee.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/entities/bee.js?");

/***/ }),

/***/ "./src/game-logic/entities/enemy.js":
/*!******************************************!*\
  !*** ./src/game-logic/entities/enemy.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Enemy)\n/* harmony export */ });\n/* harmony import */ var _entity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./entity.js */ \"./src/game-logic/entities/entity.js\");\nconsole.log(\"enemy.js started loading\");\n\n\nclass Enemy extends _entity_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(enemyName, enemyProperties) {\n        super(enemyName, enemyProperties)\n        this.enemyType = enemyProperties.enemytype /// IS THIS NECESSARY (NECESSARY HERE?)\n    }\n\n    move() {\n        let directionCoords = this.directionToPlayer()\n        super.move(directionCoords)\n    };\n\n    collidingWithPlayer() {\n        let player = this.map.entities.player;\n        let pos1 = this.absolutePosition;\n        let pos2 = player.absolutePosition;\n        let dim1 = this.dimension;\n        let dim2 = player.dimension;\n\n        if(\n            this.overlapX([pos1[0] - 2, pos1[1] - 2], pos2, dim1, dim2) && this.overlapY([pos1[0] - 2, pos1[1] - 2], pos2, dim1, dim2) ||\n            this.overlapX([pos1[0] + 2, pos1[1] - 2], pos2, dim1, dim2) && this.overlapY([pos1[0] + 2, pos1[1] - 2], pos2, dim1, dim2) ||\n            this.overlapX([pos1[0] - 2, pos1[1] + 2], pos2, dim1, dim2) && this.overlapY([pos1[0] - 2, pos1[1] + 2], pos2, dim1, dim2) ||\n            this.overlapX([pos1[0] + 2, pos1[1] + 2], pos2, dim1, dim2) && this.overlapY([pos1[0] + 2, pos1[1] + 2], pos2, dim1, dim2)\n        ) { return true };\n    };\n\n    playerCollision() {\n        if(this.collidingWithPlayer()) {\n            this.map.entities.player.damagePlayerHealth(this.touchDamage);\n        };\n    };\n\n    damageEnemyHealth(damage) {\n        this.currentHealth -= damage;\n    };\n}\n\nconsole.log(\"enemy.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/entities/enemy.js?");

/***/ }),

/***/ "./src/game-logic/entities/entity.js":
/*!*******************************************!*\
  !*** ./src/game-logic/entities/entity.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Entity)\n/* harmony export */ });\n//When an entity is created, it will be given an absolute pos and (optionally) be given a subclass with subclass properties and added to the current map\n//When an entity is destroyed, it will be removed from the current map\nconsole.log(\"entity.js started loading\");\nclass Entity {\n    constructor(entityName, entityProperties = {}) {\n        this.name = entityName;\n        this.absolutePosition = this.parseXY(entityProperties);\n        this.dimension = this.parseXY(entityProperties, \"dim\");\n        this.sprite = entityProperties.sprite;\n        this.color = entityProperties.color;\n        this.speed = entityProperties.speed;\n        this.collide = entityProperties.collide;\n    }\n\n    parseXY(entityProperties, attribute = \"pos\") {\n        let x, y\n        if(attribute === \"pos\") {\n            x = entityProperties.absolutepositionx;\n            y = entityProperties.absolutepositiony;\n        }\n        if (attribute === \"dim\") {\n            x = entityProperties.dimensionx;\n            y = entityProperties.dimensiony;\n        }\n        return [x, y];\n    }\n\n    findEntityCenterCoords(entity) {\n        let [dimensionCenterX, dimensionCenterY, absoluteX, absoluteY] = [\n            entity.dimension[0] / 2,\n            entity.dimension[1] / 2,\n            entity.absolutePosition[0],\n            entity.absolutePosition[1]\n        ];\n        return [\n            absoluteX + dimensionCenterX,\n            absoluteY + dimensionCenterY\n        ];\n    }\n\n    coordDistanceBetweenEntities(startEntity, targetEntity) {\n        let startCenter = this.findEntityCenterCoords(startEntity);\n        let targetCenter = this.findEntityCenterCoords(targetEntity);\n\n        return [\n            startCenter[0] - targetCenter[0],\n            startCenter[1] - targetCenter[1]\n        ];\n    };\n\n    move(distanceXY) {\n        let targetPosition = [\n            this.absolutePosition[0] + (distanceXY[0] * this.speed),\n            this.absolutePosition[1] + (distanceXY[1] * this.speed)\n        ];\n\n        if (this.collide) {\n            while (this.anyColliding(targetPosition)) {\n                const buffer = 1 // smallest space possible between two colliding objects\n                let deltaX = targetPosition[0] - this.absolutePosition[0];\n                let deltaY = targetPosition[1] - this.absolutePosition[1];\n                if (Math.abs(deltaX) < buffer && Math.abs(deltaY) < buffer) {\n                    targetPosition = this.absolutePosition;\n                    break;\n                } else {\n                    targetPosition = [\n                        this.absolutePosition[0] + deltaX * 0.9,\n                        this.absolutePosition[1] + deltaY * 0.9\n                    ];\n                };\n            };\n        };\n\n        this.absolutePosition = targetPosition;\n    }\n\n    anyColliding(targetPosition){\n        for (const entity in this.map.entities) {\n            let ent = this.map.entities[entity];\n            if (this !== ent && ent.collide && this.collidingWithEntityAtCoord(ent, targetPosition)) {\n                return true;\n            };\n        };\n    };\n\n    collidingWithEntityAtCoord(targetEntity, targetPosition) {\n        let pos1 = targetPosition;\n        let pos2 = targetEntity.absolutePosition;\n        let dim1 = this.dimension;\n        let dim2 = targetEntity.dimension;\n\n        return this.overlapX(pos1, pos2, dim1, dim2) && this.overlapY(pos1, pos2, dim1, dim2);\n    };\n\n    overlapX(pos1, pos2, dim1, dim2) {\n        if(pos1[0] + dim1[0] > pos2[0] && pos2[0] + dim2[0] > pos1[0]) {\n            return true;\n        };\n    };\n\n    overlapY(pos1, pos2, dim1, dim2) {\n        if (pos1[1] + dim1[1] > pos2[1] && pos2[1] + dim2[1] > pos1[1]) {\n            return true;\n        };\n    };\n\n    closestEnemy() {\n        let entities = this.map.entities;\n        let shortestDistance = 0;\n        let enemy = this; // if no enemies exist, return self\n\n        for(const entity in entities) {\n            let ent = entities[entity];\n            if(ent.enemyType) {\n                let distance = this.distanceToEnemy(ent);\n                if(distance < shortestDistance || !shortestDistance) {\n                    shortestDistance = distance;\n                    enemy = ent;\n                };\n            };\n        };\n\n        return enemy;\n    };\n\n    distanceToEnemy(enemy) {\n        let position = this.absolutePosition;\n        let enemyPosition = this.findEntityCenterCoords(enemy);\n        let deltaX = enemyPosition[0] - position[0];\n        let deltaY = enemyPosition[1] - position[1];\n\n        return Math.sqrt(deltaX ** 2 + deltaY ** 2);\n    }\n\n    rewardExperience() {\n        this.map.entities.player.gainExperience(this.experience);\n    }\n\n    onDeath() {\n        let id = this.id;\n\n        if(this.enemyType) { this.rewardExperience() };\n        delete this.map.entities[id];\n    };\n}\nconsole.log(\"entity.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/entities/entity.js?");

/***/ }),

/***/ "./src/game-logic/entities/missile-projectile.js":
/*!*******************************************************!*\
  !*** ./src/game-logic/entities/missile-projectile.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MissileProjectile)\n/* harmony export */ });\n/* harmony import */ var _projectile_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./projectile.js */ \"./src/game-logic/entities/projectile.js\");\nconsole.log(\"missile-projectile.js started loading\");\n\n\nclass MissileProjectile extends _projectile_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(missileName, missileProperties) {\n        super(missileName, missileProperties);\n        this.damage = missileProperties.damage;\n        this.speed = missileProperties.speed;\n        this.dimension = [4, 4];\n        this.color = \"blue\";\n        this.collide = false;\n        this.sprite = \"spriteurl\";\n        this.projectileType = \"missile\";\n    }\n\n    directionToTarget() {  //finds target X and Y (assuming the max either can be is 1)\n        let closestEnemy = this.closestEnemy();\n        if (closestEnemy === this) { return [0,0] };\n        let targetPosition = this.findEntityCenterCoords(closestEnemy);\n        let deltaX = targetPosition[0] - this.absolutePosition[0];\n        let deltaY = targetPosition[1] - this.absolutePosition[1];\n\n        if (Math.abs(deltaX) > 1 || Math.abs(deltaY) > 1) {\n            let biggerSide;\n            if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                biggerSide = Math.abs(deltaX);\n            } else {\n                biggerSide = Math.abs(deltaY);\n            }\n            deltaX /= biggerSide;\n            deltaY /= biggerSide;\n        }\n\n        return [deltaX, deltaY];\n    }\n\n    collidingEnemy() {\n        let currentPosition = this.absolutePosition;\n\n        for (const entity in this.map.entities) {\n            let ent = this.map.entities[entity];\n            if (ent.enemyType && this.collidingWithEntityAtCoord(ent, currentPosition)) {\n                return ent;\n            };\n        };\n    };\n\n    doDamage() {\n        let targetEnemy = this.collidingEnemy();\n        \n        if (targetEnemy) {\n            targetEnemy.damageEnemyHealth(this.damage);\n            this.onDeath();\n        };\n    };\n}\nconsole.log(\"missle-projectile.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/entities/missile-projectile.js?");

/***/ }),

/***/ "./src/game-logic/entities/player.js":
/*!*******************************************!*\
  !*** ./src/game-logic/entities/player.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Player)\n/* harmony export */ });\n/* harmony import */ var _default_player_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../default-player.json */ \"./src/game-logic/default-player.json\");\n/* harmony import */ var _main_menu_player_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main-menu-player.json */ \"./src/game-logic/main-menu-player.json\");\n/* harmony import */ var _entity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./entity.js */ \"./src/game-logic/entities/entity.js\");\n/* harmony import */ var _levelPool_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../levelPool.json */ \"./src/game-logic/levelPool.json\");\n/* harmony import */ var _abilities_missile_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../abilities/missile.js */ \"./src/game-logic/abilities/missile.js\");\n/* harmony import */ var _abilities_main_menu_ability_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../abilities/main-menu-ability.js */ \"./src/game-logic/abilities/main-menu-ability.js\");\n/* harmony import */ var _abilities_regen_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../abilities/regen.js */ \"./src/game-logic/abilities/regen.js\");\n//This will import different player seeds and use one to create a player\nconsole.log(\"player.js started loading\");\n\n\n\n\n\n\n\n\n\nclass Player extends _entity_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(game, map, seed, name = \"John\", color = \"pink\", ability = \"missile\") {\n        super(name, Player.pickSeed(seed));\n        this.game = game;\n        this.seed = Player.pickSeed(seed);\n        this.map = map;\n        this.color = this.seed.color || color || \"pink\";\n        this.abilities = {};\n        this.newAbility(ability);\n        this.maxHealth = this.seed.health || 300;\n        this.currentHealth = this.maxHealth;\n        this.experience = 0;\n        this.level = 1;\n        this.experienceToLevelUp = this.seed.experiencetolevelup || 10;\n        this.specialPool = _levelPool_json__WEBPACK_IMPORTED_MODULE_3__.special;\n    };\n\n    static pickSeed(seed) {\n        switch (seed) {\n            case \"default\":\n                return _default_player_json__WEBPACK_IMPORTED_MODULE_0__;\n            case \"mainmenu\":\n                return _main_menu_player_json__WEBPACK_IMPORTED_MODULE_1__;\n        }\n    }\n\n    damagePlayerHealth(damage) {\n        this.currentHealth -= damage;\n    };\n\n    onDeath() {\n        this.game.eventHandler.triggerEvent(\"gameover\")\n    };\n\n    gainUpgrade(upgrade) {\n        if (this.specialPool[upgrade]) {\n            this.specialPool[upgrade].count -= 1\n        }\n\n        switch (upgrade) {\n            case \"max-health\": \n                this.maxHealth += 60;\n                break;\n            case \"health-regen\":\n                if (!this.abilities[upgrade]) {\n                    this.newAbility(upgrade);\n                } else {\n                    this.abilities[upgrade].increaseRegen(2.5)\n                }\n                break;\n        }\n    }\n\n    newAbility(ability) {\n        let abilityInstance;\n        switch(ability) {\n            case \"missile\":\n                abilityInstance = new _abilities_missile_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this);\n                break;\n            case \"mainmenuability\":\n                abilityInstance = new _abilities_main_menu_ability_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this);\n                break;\n            case \"health-regen\":\n                abilityInstance = new _abilities_regen_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this);\n                break;\n        }\n\n        this.abilities[ability] = abilityInstance;\n    }\n\n    gainExperience(experience) {\n        this.experience = this.experience + experience;\n        if(this.experience > this.experienceToLevelUp) {\n            this.experience -= this.experienceToLevelUp;\n            this.levelUp();\n        };\n    };\n\n    levelUp() {\n        this.level += 1;\n        this.experienceToLevelUp *= 1;  //Need to tweak this\n        this.game.eventHandler.triggerEvent(\"levelup\")\n    };\n\n    rollForPick(weighing) {\n        return weighing > Math.random();\n    }\n\n    pickWithWeighing(pool) {\n        let chosenPick;\n\n        while(!chosenPick) {\n            let poolKeys = Object.keys(pool);\n            let randomIndex = Math.floor(Math.random() * poolKeys.length);\n            let unrolledPick = poolKeys[randomIndex];\n            let weighing = pool[unrolledPick].weighing;\n            if(this.rollForPick(weighing)) {\n                chosenPick = unrolledPick;\n            }\n        }\n\n        return chosenPick;\n    };\n\n    pullStatAndColor() {\n        let stats = _levelPool_json__WEBPACK_IMPORTED_MODULE_3__.stats;\n        let pickedStat = this.pickWithWeighing(stats);\n        let color = stats[pickedStat].color\n\n        return [pickedStat, color];\n    };\n\n    pullSpecialColorCount() {\n        let pickedSpecial = this.pickWithWeighing(this.specialPool);\n        let color = this.specialPool[pickedSpecial].color;\n        let count = this.specialPool[pickedSpecial].count;\n\n        return [pickedSpecial, color, count];\n    };\n\n    checkChoicesDuplicate(chosenArray, newChoice) {\n        for(let i = 0; i < chosenArray.length; i++) {\n            if(newChoice[0] === chosenArray[i][0]) {\n                return true;\n            };\n        };\n\n        return false;\n    }\n\n    pullChoicesFromLevelPool() {   //pull from levelpool via weighing and amount allowed;\n        let choices = [];\n        let choice;\n\n        if (this.level % 3 === 0) { //special level-up\n            let unpushedLength = choices.length;\n            while (choices.length === unpushedLength) {\n                choice = this.pullSpecialColorCount();\n                if (choice[2] !== 0) {\n                    choices.push([choice[0], choice[1]]);\n                }\n            }\n            while (choices.length < 3) {\n                if (Math.random() < 0.5) {\n                    unpushedLength = choices.length;\n                    while (choices.length === unpushedLength) {\n                        choice = this.pullSpecialColorCount();\n                        if (choice[2] !== 0 && !this.checkChoicesDuplicate(choices, choice)) {\n                            choices.push([choice[0], choice[1]]);\n                        };\n                    };\n                } else {\n                    choice = this.pullStatAndColor();\n                    if (!this.checkChoicesDuplicate(choices, choice)) {\n                        choices.push(choice);\n                    };\n                };\n            };\n\n        } else {\n            while (choices.length < 3) {  // regular level-up\n                choice = this.pullStatAndColor();\n                if (!this.checkChoicesDuplicate(choices, choice)) {\n                    choices.push(choice);\n                };\n            };\n        };\n\n        return choices;\n    }\n}\nconsole.log(\"player.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/entities/player.js?");

/***/ }),

/***/ "./src/game-logic/entities/projectile.js":
/*!***********************************************!*\
  !*** ./src/game-logic/entities/projectile.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Projectile)\n/* harmony export */ });\n/* harmony import */ var _entity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./entity.js */ \"./src/game-logic/entities/entity.js\");\nconsole.log(\"projectile.js started loading\");\n\n\nclass Projectile extends _entity_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(projectileName, projectileProperties) {\n        super(projectileName, projectileProperties);\n    };\n\n    move() {\n        let directionCoords = this.directionToTarget();\n        super.move(directionCoords);\n    };\n}\n\nconsole.log(\"projectile.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/entities/projectile.js?");

/***/ }),

/***/ "./src/game-logic/entities/zombie.js":
/*!*******************************************!*\
  !*** ./src/game-logic/entities/zombie.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Zombie)\n/* harmony export */ });\n/* harmony import */ var _enemy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enemy.js */ \"./src/game-logic/entities/enemy.js\");\nconsole.log(\"zombie.js started loading\");\n\nclass Zombie extends _enemy_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(zombieName, zombieProperties) {\n        super(zombieName, zombieProperties);\n        this.dimension = [35, 35]\n        this.collide = true;\n        this.color = \"green\";\n        this.speed = 2.5;\n        this.sprite = \"spriteurl\";\n        this.maxHealth = 6;\n        this.currentHealth = 6;\n        this.experience = 2;\n        this.touchDamage = 3;\n\n    }\n\n    directionToPlayer() {  // finds target X and Y (assuming the max either can be is 1)\n        let playerPosition = this.findEntityCenterCoords(this.map.entities.player)\n        let deltaX = playerPosition[0] - this.absolutePosition[0];\n        let deltaY = playerPosition[1] - this.absolutePosition[1];\n\n        if(Math.abs(deltaX) > 1 || Math.abs(deltaY) > 1) {\n            let biggerSide;\n            if(Math.abs(deltaX) > Math.abs(deltaY)) {\n                biggerSide = Math.abs(deltaX);\n            } else {\n                biggerSide = Math.abs(deltaY);\n            }\n            deltaX /= biggerSide;\n            deltaY /= biggerSide;\n        }\n\n        return [deltaX, deltaY];\n    }\n}\nconsole.log(\"zombie.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/entities/zombie.js?");

/***/ }),

/***/ "./src/game-logic/entity-spawner.js":
/*!******************************************!*\
  !*** ./src/game-logic/entity-spawner.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EntitySpawner)\n/* harmony export */ });\n/* harmony import */ var _spawn_pool_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./spawn-pool.json */ \"./src/game-logic/spawn-pool.json\");\n/* harmony import */ var _entities_bee_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entities/bee.js */ \"./src/game-logic/entities/bee.js\");\n/* harmony import */ var _entities_zombie_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./entities/zombie.js */ \"./src/game-logic/entities/zombie.js\");\n//This will import all entities, all entity subclasses\n//This will add enemies to the map during gameplay\n\nconsole.log(\"entity-spawner.js started loading\");\n\n\n\nclass EntitySpawner {\n    constructor(map) {\n        this.map = map;\n        this.boundBox = this.map.entities[1];\n        this.spawnTimer = 60;\n        this.spawnCounter = 0;\n        this.spawnCount = 1;\n        this.spawnPool = _spawn_pool_json__WEBPACK_IMPORTED_MODULE_0__;\n        this.beeCount = 0;\n        this.zombieCount = 0;\n    }\n\n    addCamera(camera) {\n        this.camera = camera;\n    }\n\n    prepareSpawnPool() {\n        let readySpawnPool = []\n\n        for (const difficulty in this.spawnPool) {\n            if (this.map.difficulty >= difficulty) {\n                for (const enemy in this.spawnPool[difficulty]) {\n                    readySpawnPool.push(enemy);\n                };\n            };\n        };\n\n        return readySpawnPool;\n    };\n\n    spawnReady() {\n        if (this.spawnCounter === 0) {\n            this.spawnCounter = this.spawnTimer;\n            return true;\n        } else {\n            this.spawnCounter--;\n        };\n    };\n\n    makePositionlessEnemy(enemyType) {\n        let enemyInstance\n\n        switch (enemyType) {\n            case \"bee\":\n                this.beeCount += 1;\n                enemyInstance = new _entities_bee_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](`bee${this.beeCount}`, { enemytype: \"bee\" });\n                break;\n            case \"zombie\":\n                this.zombieCount += 1;\n                enemyInstance = new _entities_zombie_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](`zombie${this.zombieCount}`, { enemytype: \"zombie\" });\n                break;\n        };\n\n        return enemyInstance;\n    };\n\n    pickSameAxisCoordBetween(startCoord, endCoord) {\n        let smallerCoord = endCoord;\n        let largerCoord = startCoord;\n        if(endCoord > startCoord) {\n            smallerCoord = startCoord;\n            largerCoord = endCoord;\n        };\n\n        return Math.random() * (largerCoord - smallerCoord) + smallerCoord;\n    };\n\n    coordsInView(enemy) {\n        return this.camera.entityInView(enemy);\n    }\n\n    hasViableSpawnCoords(enemy) {\n        if (!enemy.map) { this.map.addEntity(enemy) };\n\n        if (this.coordsInView(enemy)) { return false };\n        \n        if (enemy.collide && enemy.anyColliding(enemy.absolutePosition)) { return false };\n\n        return true;\n    }\n\n    findSpawnCoords(enemy) {\n        let boundPositionX = this.boundBox.absolutePosition[0]\n        let boundPositionY = this.boundBox.absolutePosition[1]\n        let boundDimensionX = this.boundBox.dimension[0]\n        let boundDimensionY = this.boundBox.dimension[1]\n\n        let boundXLimit = boundPositionX + boundDimensionX\n        let boundYLimit = boundPositionY + boundDimensionY\n\n        let spawnX = this.pickSameAxisCoordBetween(boundPositionX, boundXLimit)\n        let spawnY = this.pickSameAxisCoordBetween(boundPositionY, boundYLimit)\n\n        enemy.absolutePosition = [spawnX, spawnY]\n    }\n\n    spawnEnemies() {\n        if (this.spawnReady()) {\n            let readySpawnPool = this.prepareSpawnPool()\n\n            for(let i = 0; i < this.spawnCount; i++) {\n                let randomIndex = Math.floor(Math.random() * readySpawnPool.length);\n                let enemyType = readySpawnPool[randomIndex]\n                let enemyInstance = this.makePositionlessEnemy(enemyType)\n\n                this.findSpawnCoords(enemyInstance);\n                while(!this.hasViableSpawnCoords(enemyInstance)) {\n                    this.findSpawnCoords(enemyInstance);\n                }\n            };\n        };\n    };\n\n}\nconsole.log(\"entity-spawner.js finished loading\");\n\n\n//# sourceURL=webpack://js_game/./src/game-logic/entity-spawner.js?");

/***/ }),

/***/ "./src/game-logic/event-handler.js":
/*!*****************************************!*\
  !*** ./src/game-logic/event-handler.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EventHandler)\n/* harmony export */ });\n/* harmony import */ var _keyboard_words_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keyboard-words.json */ \"./src/game-logic/keyboard-words.json\");\nconsole.log(\"event-handler.js started loading\");\n\n\nclass EventHandler {\n    constructor(game) {\n        this.game = game;\n        this.events = [];\n        this.triggerEvent();\n    };\n\n    triggerEvent(event = \"mainmenu\") {\n        switch(event) {\n            case \"mainmenu\":\n                this.mainMenu()\n                break;\n            case \"pause\":\n                this.pause()\n                break;\n            case \"play\":\n                this.loadMap(\"test\");\n                break;\n            case \"enter\":\n                this.enter();\n                break;\n            case \"instructions\":\n                this.instructions();\n                break;\n            case \"gameover\":\n                this.gameOver();\n                break;\n            case \"levelup\":\n                this.levelUp();\n                break;\n            case \"levelupchoice1\":\n            case \"levelupchoice2\":\n            case \"levelupchoice3\":\n                let upgradeChoice = document.querySelector(`[data-trigger=\"${event}\"]`)\n                this.game.player.gainUpgrade(upgradeChoice.dataset.upgrade);\n                this.levelUp();\n                break;\n        };\n    };\n\n    addEventListeners() {\n        let gameContainer = document.querySelector('#game')\n        window.addEventListener('keydown', (e) => { this.moveKey(e) }, false); // allow eventHandler to handle kebyoard input\n        window.addEventListener('keyup', (e) => { this.removeKey(e) }, false); // make repeat player movement browser-agnostic\n        window.addEventListener('mousemove', (e) => { gameContainer.style.cursor = 'auto'} );\n        this.addMenuListeners(\"#main-menu-list\");\n        this.addMenuListeners(\"#pause-menu-list\");\n        this.addMenuListeners(\"#instructions-menu-list\");\n        this.addMenuListeners(\"#game-over-menu-list\");\n        this.addMenuListeners(\"#level-up-menu-list\");\n    }\n\n    clearListSelected() {\n        let listElements = document.querySelectorAll('li')\n        for (let i = 0; i < listElements.length; i++) {\n            let list = listElements[i];\n            list.dataset.selected = false;\n        }\n    }\n\n    mouseOverSelected(event) {\n        let target = event.target\n        if(target.dataset.trigger) {\n            this.clearListSelected();\n            target.dataset.selected = true;\n        }\n    }\n\n    addMenuListeners(menuSelector) {\n        let menu = document.querySelector(menuSelector);\n        menu.addEventListener('mouseover', (e) => { this.mouseOverSelected(e) });\n        menu.addEventListener('mouseout', () => { this.clearListSelected() });\n        menu.addEventListener('click', (e) => {\n            if (e.target.dataset.trigger) {\n                this.triggerEvent(e.target.dataset.trigger);\n            };\n        });\n    }\n\n    addEvent(event) {\n        this.events.push(event);\n    }\n\n    emptyEvents() {\n        return this.events.length === 0;\n    }\n\n    clearEvent(event) {\n        let eventIndex = this.events.indexOf(event);\n        if(eventIndex > -1) {\n            this.events.splice(eventIndex);\n        };\n    };\n\n    clearEvents() {\n        this.events = [];\n    }\n    \n    checkEvent(event) {\n        return this.events.includes(event);\n    }\n\n    showNode(node) {\n        let Node = document.querySelector(node);\n        Node.style.visibility = \"visible\"\n    }\n\n    hideNode(node) {\n        let Node = document.querySelector(node);\n        Node.style.visibility = \"hidden\"\n    }\n\n    showViewBorder() {\n        let view = document.querySelector(\"#view\");\n        view.style.border = \"double 6px rgb(150, 150, 150)\";\n    }\n\n    hideViewBorder() {\n        let view = document.querySelector(\"#view\");\n        view.style.border = \"none\";\n    }\n    \n    loadMap(map = \"test\") {\n        if (this.checkEvent(\"pause\")) {\n            this.pause();\n        };\n\n        if (this.checkEvent(\"gameover\")) {\n            this.gameOver();\n        };\n\n        this.clearEvents();\n        this.game.loadMap(\"John\", \"orange\", \"missile\", map, \"default\");\n        this.hideNode(\".main-menu\");\n        this.hideNode(\".pause-menu\");\n        this.hideNode(\".game-over-menu\");\n        this.hideNode(\".level-up-menu\");\n        this.showViewBorder();\n    }\n\n    applyChildSelected(selector) {\n        let parent = document.querySelector(selector);\n        let i = 0\n        let child = parent.children[i];\n        while(!child.dataset.trigger) {\n            i++\n            child = parent.children[i]\n        }\n        child.dataset.selected = true;\n        return child;\n    }\n    \n    mainMenu() {\n        if (this.checkEvent(\"pause\")) {\n            this.pause();\n        };\n\n        if (this.checkEvent(\"gameover\")) {\n            this.gameOver();\n        };\n\n        this.clearEvents();\n        this.applyChildSelected(\"#main-menu-list\");\n        this.game.loadMap(\"menuplayer\", \"pink\", \"mainmenuability\");\n        this.game.camera.followNewEntity(this.game.map.entities[1]);\n        this.addEvent(\"mainmenu\");\n        this.showNode(\".main-menu\");\n        this.hideViewBorder();\n    };\n\n    restoreFrameQueueAndFrameTimer() {\n        clearInterval(this.game.frameTimer);\n        this.game.restoreFrameQueueAndFrameTimer([this.storedQueue, this.storedEveryQueue]);\n    };\n\n    storeFrameQueueAndFrameTimer() {\n        clearInterval(this.game.frameTimer);\n        this.storedQueue = this.game.frameQueue.queue;\n        this.storedEveryQueue = this.game.frameQueue.everyQueue;\n        this.game.frameQueue.clearQueue();\n    };\n    \n    pause() { // clears setInterval and pauses the game\n        if (this.checkEvent(\"pause\")) {\n            this.clearListSelected();\n            this.restoreFrameQueueAndFrameTimer();\n            this.clearEvent(\"pause\");\n            this.hideNode(\".pause-menu\");\n\n        } else if (this.emptyEvents()) {\n            this.storeFrameQueueAndFrameTimer();\n            this.clearListSelected();\n            this.applyChildSelected(\"#pause-menu-list\");\n            this.game.newPauseFrameTimer(); // allows for setInterval to resume without updating the game\n            this.addEvent(\"pause\");\n            this.showNode(\".pause-menu\");\n        }\n    }\n\n    enter() {\n        let element = document.querySelector('[data-selected=\"true\"]');\n        if (element) {\n            element.dataset.selected = false;\n            this.triggerEvent(element.dataset.trigger);\n        }\n    };\n\n    instructions() {\n        if (this.checkEvent(\"instructions\")) {\n            this.events.splice(this.events.indexOf(\"instructions\"), 1);\n            let currentMenu = this.events[0]\n            this.clearEvent(\"instructions\");\n            this.clearListSelected();\n            this.hideNode(\".instructions-menu\");\n            if (currentMenu === \"pause\") {\n                this.applyChildSelected(\"#pause-menu-list\");\n                this.showNode(\".pause-menu\")\n            } else {\n                this.applyChildSelected(\"#main-menu-list\");\n                this.showNode(\".main-menu\")\n            }\n        } else {\n            this.clearListSelected();\n            this.addEvent(\"instructions\");\n            this.applyChildSelected(\"#instructions-menu-list\");\n            this.hideNode(\".pause-menu\");\n            this.hideNode(\".main-menu\");\n            this.showNode(\".instructions-menu\");\n        }\n    }\n\n    gameOver() {\n        if (this.checkEvent(\"gameover\")) {\n            this.hideNode(\".game-over-menu\");\n            this.clearEvents();\n            this.game.newFrameTimer();\n        } else {\n            clearInterval(this.game.frameTimer);\n            this.game.frameQueue.clearQueue();\n            this.game.newPauseFrameTimer();\n            this.addEvent(\"gameover\");\n            this.applyChildSelected(\"#game-over-menu-list\");\n            this.showNode(\".game-over-menu\");\n        };\n    }\n    \n    formatChoiceName(unformattedChoice) {\n        let upperName = unformattedChoice[0].toUpperCase();\n        let splitName = upperName.split(\"-\");\n        return [splitName.join(\" \"), unformattedChoice[1]]\n    }\n\n    populateLevelUpChoices() {  //Populate level up list menu with level up choices\n        let levelChoices = this.game.player.pullChoicesFromLevelPool();\n\n        let formattedChoice1 = this.formatChoiceName(levelChoices[0]);\n        let formattedChoice2 = this.formatChoiceName(levelChoices[1]);\n        let formattedChoice3 = this.formatChoiceName(levelChoices[2]);\n        \n        let levelList = document.querySelector(\"#level-up-menu-list\");\n        let firstInList = document.querySelector('[data-trigger=\"levelupchoice1\"]');\n        let secondInList = firstInList.nextElementSibling;\n        let thirdInList = levelList.lastElementChild;\n        \n        firstInList.textContent = formattedChoice1[0];\n        firstInList.style.color = formattedChoice1[1];\n        firstInList.dataset.upgrade = levelChoices[0][0];\n        secondInList.textContent = formattedChoice2[0];\n        secondInList.style.color = formattedChoice2[1];\n        secondInList.dataset.upgrade = levelChoices[1][0];\n        thirdInList.textContent = formattedChoice3[0];\n        thirdInList.style.color = formattedChoice3[1];\n        thirdInList.dataset.upgrade = levelChoices[2][0];\n    };\n\n    levelUp() {\n        if (this.checkEvent(\"levelup\")) {\n            this.hideNode(\".level-up-menu\");\n            this.clearEvents();\n            this.game.newFrameTimer();\n        } else {\n        this.storeFrameQueueAndFrameTimer();\n        this.clearListSelected();\n        this.applyChildSelected(\"#level-up-menu-list\");\n        this.game.newPauseFrameTimer();\n        this.populateLevelUpChoices();\n        this.addEvent(\"levelup\");\n        this.showNode(\".level-up-menu\");\n        };\n    };\n    \n    navigateUpList(selectedElement) {\n        selectedElement.dataset.selected = false;\n        let previousElement = selectedElement.previousElementSibling;\n\n        if (!previousElement || !previousElement.dataset.trigger) {\n            previousElement = selectedElement.parentElement.lastElementChild;\n        }\n\n        previousElement.dataset.selected = true;\n    }\n    \n    navigateDownList(selectedElement) {\n        selectedElement.dataset.selected = false;\n        let nextElement = selectedElement.nextElementSibling;\n\n        if (!nextElement || !nextElement.dataset.trigger) {\n            let parent = selectedElement.parentElement;\n            let i = 0;\n            nextElement = parent.children[i];\n            while (!nextElement.dataset.trigger) {\n                i++;\n                nextElement = parent.children[i];\n            };\n        };\n\n        nextElement.dataset.selected = true;\n    }\n    \n    menuKeySelect(keyName, selectedElement) {\n        switch (keyName) {\n            case \"up\":\n            case \"left\":\n                this.navigateUpList(selectedElement);\n                break;\n            case \"down\":\n            case \"right\":\n                this.navigateDownList(selectedElement);\n                break;\n        }\n    }\n\n    menuKeyPrepareSelect(keyName) {\n        let parentMenuList;\n\n        if (this.checkEvent(\"instructions\")) {\n            parentMenuList = document.querySelector(\"#instructions-menu-list\");\n        } else {\n            let currentMenu = this.events[0];\n            switch (currentMenu) {\n                case \"mainmenu\":\n                    parentMenuList = document.querySelector(\"#main-menu-list\");\n                    break;\n                case \"pause\":\n                    parentMenuList = document.querySelector(\"#pause-menu-list\");\n                    break;\n                case \"gameover\":\n                    parentMenuList = document.querySelector(\"#game-over-menu-list\");\n                    break;\n                case \"levelup\":\n                    parentMenuList = document.querySelector(\"#level-up-menu-list\");\n                    break;\n            };\n        };\n\n        let selectedElement = document.querySelector('[data-selected=\"true\"]');\n        if(!selectedElement) {\n            selectedElement = this.applyChildSelected(`#${parentMenuList.id}`);\n        }\n\n        this.menuKeySelect(keyName, selectedElement);\n    }\n\n    move(direction) {\n        this.game.player.move(direction);\n    };\n\n    moveKey(e) {\n        let gameContainer = document.querySelector('#game')\n        gameContainer.style.cursor = 'none';  //hides mouse while using keyboard\n\n        let k = e.key;\n        let keyName = _keyboard_words_json__WEBPACK_IMPORTED_MODULE_0__[k]\n        switch (k) {\n            case \"ArrowUp\":\n            case \"w\":\n            case \"W\":\n                if (!e.repeat) {\n                    if (this.emptyEvents()){\n                        this.game.frameQueue.everyQueuePush(`${keyName}`, () => { this.move([0, -1]) });\n                    } else {\n                        this.menuKeyPrepareSelect(keyName);\n                    }\n                }\n                break;\n            case \"ArrowRight\":\n            case \"d\":\n            case \"D\":\n                if (!e.repeat) {\n                    if (this.emptyEvents()) {\n                        this.game.frameQueue.everyQueuePush(`${keyName}`, () => { this.move([1, 0]) });\n                    } else {\n                        this.menuKeyPrepareSelect(keyName);\n                    }\n                }\n                break;\n            case \"ArrowDown\":\n            case \"s\":\n            case \"S\":\n                if (!e.repeat) {\n                    if (this.emptyEvents()) {\n                        this.game.frameQueue.everyQueuePush(`${keyName}`, () => { this.move([0, 1]) });\n                    } else {\n                        this.menuKeyPrepareSelect(keyName);\n                    }\n                }\n                break;\n            case \"ArrowLeft\":\n            case \"a\":\n            case \"A\":\n                if (!e.repeat) {\n                    if (this.emptyEvents()) {\n                        this.game.frameQueue.everyQueuePush(`${keyName}`, () => { this.move([-1, 0]) });\n                    } else {\n                        this.menuKeyPrepareSelect(keyName);\n                    }\n                }\n                break;\n            case \"Escape\":\n            case \"p\":\n            case \"P\":\n                if (!e.repeat) {\n                    this.triggerEvent(\"pause\");\n                }\n                break;\n            case \"Enter\":\n            case \" \":\n                if (!e.repeat) {\n                    this.triggerEvent(\"enter\");\n                }\n                break;\n        }\n    }\n\n    removeKey(e) {\n        let k = e.key;\n        this.game.frameQueue.everyQueueDel(`${_keyboard_words_json__WEBPACK_IMPORTED_MODULE_0__[k]}`);\n    };\n}\nconsole.log(\"event-handler.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/event-handler.js?");

/***/ }),

/***/ "./src/game-logic/frame-queue.js":
/*!***************************************!*\
  !*** ./src/game-logic/frame-queue.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FrameQueue)\n/* harmony export */ });\nconsole.log(\"frame-queue.js started loading\");\n\nclass FrameQueue {\n    constructor(restoreQueue) {\n        this.clearQueue()\n        this.restoreQueue(restoreQueue)\n    };\n\n    clearQueue() {\n        this.queue = [];\n        this.everyQueue = {};\n    }\n\n    restoreQueue(restoreQueue) {\n        if (restoreQueue) {\n            this.queue = restoreQueue[0]\n            this.Everyqueue = restoreQueue[1]\n        }\n    }\n\n    push(func) {\n        this.queue.push(func)\n    }\n\n    everyQueuePush(funcKey, func) {\n        this.everyQueue[funcKey] = func\n    }\n\n    everyQueueDel(funcKey) {\n        delete this.everyQueue[funcKey]\n    }\n\n    frameQueueExecute() {\n        for (const funcKey in this.everyQueue) {\n            this.queue.unshift(this.everyQueue[funcKey])\n        };\n\n        while(this.queue.length) {\n            (this.queue.shift())()\n        }\n    };\n}\n\nconsole.log(\"frame-queue.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/frame-queue.js?");

/***/ }),

/***/ "./src/game-logic/game.js":
/*!********************************!*\
  !*** ./src/game-logic/game.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var _map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map.js */ \"./src/game-logic/map.js\");\n/* harmony import */ var _render_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./render.js */ \"./src/game-logic/render.js\");\n/* harmony import */ var _camera_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./camera.js */ \"./src/game-logic/camera.js\");\n/* harmony import */ var _entities_player_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./entities/player.js */ \"./src/game-logic/entities/player.js\");\n/* harmony import */ var _frame_queue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./frame-queue.js */ \"./src/game-logic/frame-queue.js\");\n/* harmony import */ var _event_handler_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./event-handler.js */ \"./src/game-logic/event-handler.js\");\n//This will handle all frame game logic, including updating and rendering the map between every frame\n//This will update the map as more entities are created or destroyed\n//This will allow the user to change maps\n//When an entity is created, it will be given an absolute pos and (optionally) be given a subclass with subclass properties and added to the current map\n//When an entity is destroyed, it will be removed from the current map\nconsole.log(\"game.js started loading\");\n\n\n\n\n\n\n\nclass Game {\n    constructor(ctx, canvas) {\n        this.ctx = ctx;\n        this.canvas = canvas;\n        this.eventHandler = new _event_handler_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this); // create evenHandler, which will load main menu map with main menu \"player\"\n        this.frameQueue = new _frame_queue_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n        this.newFrameTimer() // update every frame at 60 frames per second -- Can be replaced with window.requestAnimationFrame()\n        this.eventHandler.addEventListeners()\n    };\n\n    newFrameTimer() {\n        if(this.frameTimer) {\n            clearInterval(this.frameTimer);\n        };\n\n        this.frameTimer = setInterval(() => { this.update() }, (1000 / 60));\n    }\n\n    loadMap(playerName, playerColor, playerAbility, seed = \"mainmenu\", player = \"mainmenu\") {\n        if (this.frameQueue) { this.frameQueue.clearQueue() }\n        this.map = new _map_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](seed);\n        this.player = new _entities_player_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this, this.map, player, playerName, playerColor, playerAbility);\n        this.camera = new _camera_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.ctx, this.canvas, this.map, this.player);\n        this.map.addPlayerAndCamera(this.player, this.camera);\n    };\n\n    newPauseFrameTimer() {\n        this.frameTimer = setInterval(() => { this.updateWhilePaused() }, (1000 / 60));\n    }\n\n    updateWhilePaused() {\n        this.frameQueue.frameQueueExecute();\n        this.drawFrame(this.ctx, this.canvas, this.map);\n    }\n\n    restoreFrameQueueAndFrameTimer(restoreQueue) {\n        this.frameQueue = new _frame_queue_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](restoreQueue);\n        this.newFrameTimer()\n    }\n\n    update() {\n        this.logicStep(); // update camera, all positions, statuses, etc\n        this.drawFrame(this.ctx, this.canvas, this.map); // draw everything on the map\n        console.log(\"frame passed\");\n    };\n\n    spawnEnemies() {\n        this.map.entitySpawner.spawnEnemies();\n    }\n\n    activateAbilities() {\n        for(const ability in this.player.abilities) {\n            let abt = this.player.abilities[ability]\n            this.frameQueue.push(() => { abt.activate() });\n        };\n    }\n    \n    moveEnemies() {\n        for(const entity in this.map.entities) {\n            let ent = this.map.entities[entity];\n            if(ent.enemyType) {\n                this.frameQueue.push(() => { ent.move() });\n            };\n        };\n    };\n    \n    moveProjectiles() {\n        for (const entity in this.map.entities) {\n            let ent = this.map.entities[entity];\n            if (ent.projectileType) {\n                this.frameQueue.push(() => { ent.move() });\n            };\n        };\n    }\n\n    applyProjectileDamage() { // iterates through player and enemy projectiles. All close range attacks are also projectiles\n        for (const entity in this.map.entities) {\n            let ent = this.map.entities[entity];\n            if (ent.projectileType) {\n                this.frameQueue.push(() => { ent.doDamage() });\n            };\n        };\n    };\n\n    applyEnemyCollision() {\n        for (const entity in this.map.entities) {\n            let ent = this.map.entities[entity];\n            if (ent.enemyType) {\n                this.frameQueue.push(() => { ent.playerCollision() });\n            };\n        };\n    };\n\n    applyDeath() {\n        for (const entity in this.map.entities) {\n            let ent = this.map.entities[entity];\n            if (typeof ent.currentHealth === \"number\" && ent.currentHealth <= 0) {\n                this.frameQueue.push(() => { ent.onDeath() });\n            };\n        };\n    };\n\n    inflictDamage() {\n        this.applyProjectileDamage();\n        this.applyEnemyCollision();\n        this.applyDeath();\n    };\n\n    logicStep() {\n        this.spawnEnemies();\n        this.activateAbilities();\n        this.moveEnemies();\n        this.moveProjectiles();\n        this.inflictDamage();\n        this.frameQueue.frameQueueExecute();\n        this.camera.followEntity(); // update camera to new follow coordinates\n        console.log(\"current:\")\n        console.log(this.player.currentHealth)\n        console.log(\"max:\")\n        console.log(this.player.maxHealth)\n    };\n\n    drawFrame() {\n        new _render_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.ctx, this.canvas, this.map, this.camera);\n    };\n}\n\n\nconsole.log(\"game.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/game.js?");

/***/ }),

/***/ "./src/game-logic/map-seed-entity-loader.js":
/*!**************************************************!*\
  !*** ./src/game-logic/map-seed-entity-loader.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ mapSeedEntityLoader)\n/* harmony export */ });\n/* harmony import */ var _entities_entity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./entities/entity.js */ \"./src/game-logic/entities/entity.js\");\n/* harmony import */ var _entities_bee_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entities/bee.js */ \"./src/game-logic/entities/bee.js\");\n/* harmony import */ var _entities_zombie_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./entities/zombie.js */ \"./src/game-logic/entities/zombie.js\");\n//This will import all entities, all entity subclasses\n//This will create a seededEntities object (object with entity instances) from a seed\nconsole.log(\"map-seed-entity-loader.js started loading\");\n\n\n\n\nclass mapSeedEntityLoader {\n    constructor(seedEntities) {\n        this.entities = this.createEntitiesFromSeed(seedEntities);\n    };\n\n    createEntitiesFromSeed(seedEntities) {\n        let id = 1;\n        let entitiesObject = {};\n\n        for(const objectName in seedEntities.objects) {\n            let object = new _entities_entity_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](objectName, seedEntities.objects[objectName]);\n            entitiesObject[id] = object;\n            object.id = id;\n            id++;\n        }\n\n        for(const enemyName in seedEntities.enemies) {\n            let enemy = seedEntities.enemies[enemyName]\n            let enemyType = enemy.enemytype\n            let enemyInstance\n            switch (enemyType) {\n                case \"bee\":\n                    enemyInstance = new _entities_bee_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](enemyName, enemy);\n                    break;\n                case \"zombie\":\n                    enemyInstance = new _entities_zombie_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](enemyName, enemy);\n                    break;\n            }\n            entitiesObject[id] = enemyInstance;\n            enemyInstance.id = id;\n            id++;\n        }\n\n        return entitiesObject;\n    };\n}\nconsole.log(\"map-seed-entity-loader.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/map-seed-entity-loader.js?");

/***/ }),

/***/ "./src/game-logic/map.js":
/*!*******************************!*\
  !*** ./src/game-logic/map.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Map)\n/* harmony export */ });\n/* harmony import */ var _map_seed_entity_loader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map-seed-entity-loader.js */ \"./src/game-logic/map-seed-entity-loader.js\");\n/* harmony import */ var _entity_spawner_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entity-spawner.js */ \"./src/game-logic/entity-spawner.js\");\n/* harmony import */ var _map_seeds_main_menu_seed_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./map-seeds/main-menu-seed.json */ \"./src/game-logic/map-seeds/main-menu-seed.json\");\n/* harmony import */ var _map_seeds_test_map_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map-seeds/test-map.json */ \"./src/game-logic/map-seeds/test-map.json\");\n//This will import map seeds and use the mapSeedEntityLoader to populate itself with entities from the seed\nconsole.log(\"map.js started loading\");\n\n\n\n\n\n\nclass Map {\n    constructor (seed) {\n        this.seed = Map.pickSeed(seed)\n        this.background = seed.background;\n        this.difficulty = 1;\n        this.seededEntities = new _map_seed_entity_loader_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.seed.entities); // allows player to reset map with seeded entities at any time\n        this.addSeededEntities();\n        this.entitySpawner = new _entity_spawner_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this);\n    };\n\n    static pickSeed(seed) {\n        switch(seed) {\n            case \"mainmenu\":\n                return _map_seeds_main_menu_seed_json__WEBPACK_IMPORTED_MODULE_2__;\n            case \"test\":\n                return _map_seeds_test_map_json__WEBPACK_IMPORTED_MODULE_3__;\n        }\n    }\n\n    findHighestId() {\n        let highestId = 1;\n        for (const entityId in this.entities) {\n            if (entityId !== \"player\" && Number(entityId) >= highestId) {\n                highestId = Number(entityId) + 1;\n            };\n        };\n        return highestId;\n    };\n\n    addPlayerAndCamera(player, camera) {\n        this.entities.player = player;\n        player.id = \"player\";\n        this.camera = camera;\n        this.entitySpawner.addCamera(camera);\n    };\n\n    addSeededEntities() {\n        this.entities = this.seededEntities.entities;\n        \n        for(const entity in this.entities) {\n            this.entities[entity].map = this;\n        };\n    };\n\n    addEntity(entity) {\n        let highestId = this.findHighestId()\n\n        this.entities[highestId] = entity;\n        entity.id = highestId;\n        entity.map = this;\n    };\n}\nconsole.log(\"map.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/map.js?");

/***/ }),

/***/ "./src/game-logic/render.js":
/*!**********************************!*\
  !*** ./src/game-logic/render.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Render)\n/* harmony export */ });\nconsole.log(\"render.js started loading\");\nclass Render {\n    constructor(ctx, canvas, map, camera) {\n        this.ctx = ctx;\n        this.canvas = canvas;\n        this.map = map;\n        this.camera = camera\n        this.drawMap();\n    }\n\n    originCoords() {\n        let currentTransform = this.ctx.getTransform();\n        return [currentTransform.e, currentTransform.f];\n    };\n    \n    clearMap() {\n        let [originCoordX, originCoordY] = this.originCoords();\n        this.ctx.clearRect(-originCoordX, -originCoordY, this.canvas.width, this.canvas.height);\n    };\n\n    drawBackground(map) {\n        const background = new Image();\n        background.src = map.background.src;\n        background.dataset.posX = map.background.absolutepositionx;\n        background.dataset.posY = map.background.absolutepositiony;\n        this.background = background;\n        this.background.onload = () => {\n            this.ctx.drawImage(this.background, this.background.dataset.posX, this.background.dataset.posY);\n        };\n    };\n\n    getEntityPositionAndDimension(entity) {\n        let posX, posY, dimX, dimY;\n        return [posX, posY, dimX, dimY] = [\n            entity.absolutePosition[0],\n            entity.absolutePosition[1],\n            entity.dimension[0],\n            entity.dimension[1],\n        ];\n    }\n\n    resetdrawStyle() {\n        this.ctx.strokeStyle = \"rgb(0, 0, 0)\";\n        this.ctx.fillStyle = \"rgb(0, 0, 0)\";\n        this.ctx.lineWidth = 1;\n        this.ctx.shadowColor = \"rgba(0, 0, 0, 0)\";\n        this.ctx.shadowBlur = 0;\n    };\n    \n    drawClassicStyle(posX, posY, dimX, dimY, entity) {\n        this.resetdrawStyle();\n        this.ctx.fillStyle = entity.color;\n        this.ctx.fillRect(posX, posY, dimX, dimY);\n    };\n\n    drawLineStyle(posX, posY, dimX, dimY, entity) {\n        this.resetdrawStyle();\n        this.ctx.strokeStyle = entity.color;\n        this.ctx.lineWidth = 5;\n        this.ctx.beginPath();\n        this.ctx.rect(posX, posY, dimX, dimY);\n        this.ctx.stroke();\n    };\n\n    drawLineBlurShadowStyle(posX, posY, dimX, dimY, entity) {\n        this.resetdrawStyle();\n        this.ctx.shadowColor = entity.color;\n        this.ctx.shadowBlur = 15;\n        this.ctx.strokeStyle = entity.color;\n        this.ctx.lineWidth = 4.5;\n        this.ctx.beginPath();\n        this.ctx.rect(posX, posY, dimX, dimY);\n        this.ctx.stroke();\n    };\n\n    drawFollowingCRTLines() {\n        this.resetdrawStyle();\n        this.ctx.fillStyle = \"rgba(0, 0, 0, 0.6)\"\n        const crtLineWidth = 2.5;\n        const crtLineSpacing = 5;\n\n        let x = this.camera.currentViewCoords()[0];\n        let yMin = this.camera.currentViewCoords()[1];\n        let yMax = yMin + this.canvas.height;\n\n        for (let y = yMin; y <= yMax; y += crtLineSpacing) {\n            this.ctx.fillRect(x, y, this.canvas.width, crtLineWidth);\n        }\n    };\n\n    drawStaticCRTLines() {\n        this.resetdrawStyle();\n        const crtLineWidth = 2.5;\n        const crtLineSpacing = 5;\n        let x = -1500\n        let yMin = -1500\n        let yMax = yMin + this.canvas.height;\n\n        this.ctx.fillStyle = \"rgba(20, 20, 20, 0.5)\"\n\n        for (let y = yMin; y <= 6000; y += crtLineSpacing) {\n            this.ctx.fillRect(x, y, 4000, crtLineWidth);\n        }\n    };\n\n    drawFloatingObject(xOffset, yOffset, xDim, yDim) {   ///xOffset and yOffset will offset along canvas grid\n        this.resetdrawStyle();\n        this.ctx.fillStyle = \"white\";\n        let xCoords = this.originCoords()[0] + xOffset;\n        let yCoords = this.originCoords()[0] + yOffset;\n\n        this.ctx.fillRect(xCoords, yCoords, xDim, yDim)\n    } ;\n\n\n    drawMap() {\n        let map = this.map\n        let entityPosAndDim\n        this.clearMap();\n        // this.drawBackground(map); //Uncomment this line to see a flashing grass png\n        for(let entityId in map.entities) {\n            const entity = map.entities[entityId];\n            entityPosAndDim = this.getEntityPositionAndDimension(entity);\n            \n            if(entityId === \"1\") {  // render boundbox (background)\n                this.drawClassicStyle(...entityPosAndDim, entity);\n            } else if (entityId !== \"player\" && entityId !== \"1\" && !entity.enemyType) {  //render background objects\n                // this.drawClassicStyle(...entityPosAndDim, entity);\n                // this.drawLineStyle(...entityPosAndDim, entity);\n                this.drawLineBlurShadowStyle(...entityPosAndDim, entity);\n            } else if(entity.enemyType) {   // render enemies;\n                this.drawLineBlurShadowStyle(...entityPosAndDim, entity);\n                // this.drawLineStyle(...entityPosAndDim, entity);\n            };\n        }\n\n        let player = map.entities.player\n        entityPosAndDim = this.getEntityPositionAndDimension(player);\n        this.drawLineBlurShadowStyle(...entityPosAndDim, player); // render player after rendering background/enemies\n        // this.drawClassicStyle(...entityPosAndDim, player);\n        // this.drawLineStyle(...entityPosAndDim, player);\n\n        // this.drawFloatingObject(150, 150, 100, 100);\n        // this.drawFloatingObject(-250, 75, 100, 100);\n        // this.drawStaticCRTLines();\n        this.drawFollowingCRTLines();\n    };\n\n}\nconsole.log(\"render.js finished loading\");\n\n//# sourceURL=webpack://js_game/./src/game-logic/render.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game_logic_game_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game-logic/game.js */ \"./src/game-logic/game.js\");\nconsole.log(\"src/index.js started loading through dist/main.js\");\n\n\n//Get canvas and context\nconst canvas = document.getElementById(\"view\");\nconst ctx = canvas.getContext(\"2d\");\n\n//Start game\nlet game = new _game_logic_game_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](ctx, canvas);\nconsole.log(game);\n\n\n\n\n\n//Import and run test demo\n// import * as Demo from './game-logic/testing/demo.js'\n// Demo.translateDemo();\n\n\nconsole.log(\"src/index.js finished loading through dist/main.js\");\n\n//# sourceURL=webpack://js_game/./src/index.js?");

/***/ }),

/***/ "./src/game-logic/default-player.json":
/*!********************************************!*\
  !*** ./src/game-logic/default-player.json ***!
  \********************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"absolutepositionx\":230,\"absolutepositiony\":230,\"dimensionx\":40,\"dimensiony\":40,\"sprite\":\"spriteurl\",\"speed\":8,\"collide\":true}');\n\n//# sourceURL=webpack://js_game/./src/game-logic/default-player.json?");

/***/ }),

/***/ "./src/game-logic/keyboard-words.json":
/*!********************************************!*\
  !*** ./src/game-logic/keyboard-words.json ***!
  \********************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"ArrowUp\":\"up\",\"w\":\"up\",\"W\":\"up\",\"ArrowRight\":\"right\",\"d\":\"right\",\"D\":\"right\",\"ArrowDown\":\"down\",\"s\":\"down\",\"S\":\"down\",\"ArrowLeft\":\"left\",\"a\":\"left\",\"A\":\"left\",\"Escape\":\"escape\",\"p\":\"escape\",\"P\":\"escape\",\"Enter\":\"enter\",\" \":\"enter\"}');\n\n//# sourceURL=webpack://js_game/./src/game-logic/keyboard-words.json?");

/***/ }),

/***/ "./src/game-logic/levelPool.json":
/*!***************************************!*\
  !*** ./src/game-logic/levelPool.json ***!
  \***************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"stats\":{\"max-health\":{\"weighing\":0.5,\"color\":\"green\"},\"run-speed\":{\"weighing\":0.5,\"color\":\"blue\"},\"damage\":{\"weighing\":0.5,\"color\":\"red\"},\"health-regen\":{\"weighing\":0.6,\"color\":\"green\"},\"ability-cooldown\":{\"weighing\":0.3,\"color\":\"red\"}},\"special\":{\"projectile-count\":{\"weighing\":0.2,\"color\":\"yellow\",\"count\":-1},\"ground-slam\":{\"weighing\":0.5,\"color\":\"purple\",\"count\":1},\"attack-explosion\":{\"weighing\":0.2,\"color\":\"yellow\",\"count\":1},\"projectile-split\":{\"weighing\":0.3,\"color\":\"yellow\",\"count\":-1},\"dodge-chance\":{\"weighing\":0.5,\"color\":\"aquamarine\",\"count\":-1}}}');\n\n//# sourceURL=webpack://js_game/./src/game-logic/levelPool.json?");

/***/ }),

/***/ "./src/game-logic/main-menu-player.json":
/*!**********************************************!*\
  !*** ./src/game-logic/main-menu-player.json ***!
  \**********************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"absolutepositionx\":230,\"absolutepositiony\":230,\"dimensionx\":0,\"dimensiony\":0,\"sprite\":\"spriteurl\",\"speed\":8,\"collide\":false,\"health\":\"Infinity\",\"experiencetolevelup\":\"Infinity\"}');\n\n//# sourceURL=webpack://js_game/./src/game-logic/main-menu-player.json?");

/***/ }),

/***/ "./src/game-logic/map-seeds/main-menu-seed.json":
/*!******************************************************!*\
  !*** ./src/game-logic/map-seeds/main-menu-seed.json ***!
  \******************************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"entities\":{\"objects\":{\"bound-box\":{\"absolutepositionx\":-450,\"absolutepositiony\":-450,\"dimensionx\":1450,\"dimensiony\":1400,\"sprite\":\"spriteurl\",\"color\":\"black\"},\"arena-wall-left\":{\"absolutepositionx\":-500,\"absolutepositiony\":-500,\"dimensionx\":50,\"dimensiony\":1500,\"sprite\":\"spriteurl\",\"color\":\"black\",\"collide\":true},\"arena-wall-right\":{\"absolutepositionx\":1000,\"absolutepositiony\":-500,\"dimensionx\":50,\"dimensiony\":1500,\"sprite\":\"spriteurl\",\"color\":\"black\",\"collide\":true},\"arena-wall-top\":{\"absolutepositionx\":-500,\"absolutepositiony\":-500,\"dimensionx\":1500,\"dimensiony\":50,\"sprite\":\"spriteurl\",\"color\":\"black\",\"collide\":true},\"arena-wall-bottom\":{\"absolutepositionx\":-500,\"absolutepositiony\":950,\"dimensionx\":1550,\"dimensiony\":50,\"sprite\":\"spriteurl\",\"color\":\"black\",\"collide\":true},\"titlestart\":{\"absolutepositionx\":-25,\"absolutepositiony\":-50,\"dimensionx\":600,\"dimensiony\":600,\"collide\":true,\"sprite\":\"spriteurl\",\"color\":\"rgb(255, 255, 255)\"}}},\"background\":{\"src\":\"./game-logic/images/grass.png\",\"absolutepositionx\":-500,\"absolutepositiony\":0,\"attribution\":\"realistic PNG Designed By Sweet Dream from https://pngtree.com/freepng/grass-realistic-green-nature_8285072.html?sol=downref&id=bef\"}}');\n\n//# sourceURL=webpack://js_game/./src/game-logic/map-seeds/main-menu-seed.json?");

/***/ }),

/***/ "./src/game-logic/map-seeds/test-map.json":
/*!************************************************!*\
  !*** ./src/game-logic/map-seeds/test-map.json ***!
  \************************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"entities\":{\"objects\":{\"bound-box\":{\"absolutepositionx\":-450,\"absolutepositiony\":-450,\"dimensionx\":1450,\"dimensiony\":1400,\"sprite\":\"spriteurl\",\"color\":\"black\"},\"vertical-midline\":{\"absolutepositionx\":250,\"absolutepositiony\":0,\"dimensionx\":1,\"dimensiony\":500,\"sprite\":\"spriteurl\",\"color\":\"black\"},\"horizontal-midline\":{\"absolutepositionx\":0,\"absolutepositiony\":250,\"dimensionx\":500,\"dimensiony\":1,\"sprite\":\"spriteurl\",\"color\":\"black\"},\"first-quarter-square\":{\"absolutepositionx\":0,\"absolutepositiony\":0,\"dimensionx\":250,\"dimensiony\":250,\"sprite\":\"spriteurl\",\"color\":\"black\"},\"center-square-black\":{\"absolutepositionx\":225,\"absolutepositiony\":225,\"dimensionx\":50,\"dimensiony\":50,\"sprite\":\"spriteurl\",\"color\":\"black\"},\"center-square-red\":{\"absolutepositionx\":245,\"absolutepositiony\":245,\"dimensionx\":10,\"dimensiony\":10,\"sprite\":\"spriteurl\",\"color\":\"red\"},\"out-of-view-square1\":{\"absolutepositionx\":-125,\"absolutepositiony\":-125,\"dimensionx\":50,\"dimensiony\":50,\"sprite\":\"spriteurl\",\"color\":\"blue\",\"collide\":true},\"out-of-view-square2\":{\"absolutepositionx\":600,\"absolutepositiony\":125,\"dimensionx\":50,\"dimensiony\":50,\"sprite\":\"spriteurl\",\"color\":\"blue\",\"collide\":true},\"arena-wall-left\":{\"absolutepositionx\":-500,\"absolutepositiony\":-500,\"dimensionx\":50,\"dimensiony\":1500,\"sprite\":\"spriteurl\",\"color\":\"gray\",\"collide\":true},\"arena-wall-right\":{\"absolutepositionx\":1000,\"absolutepositiony\":-500,\"dimensionx\":50,\"dimensiony\":1500,\"sprite\":\"spriteurl\",\"color\":\"gray\",\"collide\":true},\"arena-wall-top\":{\"absolutepositionx\":-500,\"absolutepositiony\":-500,\"dimensionx\":1500,\"dimensiony\":50,\"sprite\":\"spriteurl\",\"color\":\"gray\",\"collide\":true},\"arena-wall-bottom\":{\"absolutepositionx\":-500,\"absolutepositiony\":950,\"dimensionx\":1550,\"dimensiony\":50,\"sprite\":\"spriteurl\",\"color\":\"gray\",\"collide\":true},\"view-box\":{\"absolutepositionx\":-125,\"absolutepositiony\":-125,\"dimensionx\":10,\"dimensiony\":10,\"sprite\":\"spriteurl\",\"color\":\"purple\"}},\"enemies\":{\"bee0\":{\"absolutepositionx\":0,\"absolutepositiony\":500,\"enemytype\":\"bee\"},\"zombie0\":{\"absolutepositionx\":500,\"absolutepositiony\":500,\"enemytype\":\"zombie\"}}},\"background\":{\"src\":\"./game-logic/images/grass.png\",\"absolutepositionx\":-500,\"absolutepositiony\":0,\"attribution\":\"realistic PNG Designed By Sweet Dream from https://pngtree.com/freepng/grass-realistic-green-nature_8285072.html?sol=downref&id=bef\"}}');\n\n//# sourceURL=webpack://js_game/./src/game-logic/map-seeds/test-map.json?");

/***/ }),

/***/ "./src/game-logic/spawn-pool.json":
/*!****************************************!*\
  !*** ./src/game-logic/spawn-pool.json ***!
  \****************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"1\":{\"bee\":\"bee\",\"zombie\":\"zombie\"}}');\n\n//# sourceURL=webpack://js_game/./src/game-logic/spawn-pool.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;